@@2021-12-23.0625
  1st attempt at using on realworld problem fails as shown by all the
  "not found;"'s below:
--{--cut here--
-*- mode: compilation; default-directory: "~/prog_dev/boost.org/boost.replacements/example/stackoverflow_ast_repr_string/" -*-
Compilation started at Thu Dec 23 06:12:44

make -k run
clang++ -c -O0 -gdwarf-2 -g3  -std=c++20 -ftemplate-backtrace-limit=0 -fdiagnostics-show-template-tree -fno-elide-type -fmacro-backtrace-limit=0 -fexceptions -fcxx-exceptions   -I/home/evansl/prog_dev/boost.org/boost.replacements/char_set_constexpr -I/home/evansl/prog_dev/github/bitset2/bitset2 -I/home/evansl/prog_dev/c++/ljeLocal/libs/gram_algebra -I/home/evansl/prog_dev/github/Neargye/magic_enum/include -I/home/evansl/prog_dev/c++/ljeLocal/libs/magic_enum -I/home/evansl/prog_dev/boost.org/boost.additions -I/home/evansl/prog_dev/c++/ljeLocal/libs/composite_storage/include  -I/home/evansl/prog_dev/boost.org/boost.replacements/common -I/home/evansl/prog_dev/boost.org/boost.replacements/unfold_left -I/home/evansl/prog_dev/boost.org/boost.replacements/transform_attribute -I/home/evansl/prog_dev/boost.org/boost.additions -I/home/evansl/prog_dev/boost.org/boost_1_76_0  -DWITHOUT_WHITE -DWHITE_AOF -DBRACED_AOF -DSTART_AOF -DSTART_TRANSFORM_ATTRIBUTE -DUSE_UNFOLD_LEFT -DUSE_DEMANGLE_FMT -UTRANSFORM_ATTRIBUTE_RULE2RHS -DUSE_TRANSFORM_ATTRIBUTE_SPECIALIZATION -fno-diagnostics-show-option    -ftemplate-depth=200  Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp -MMD -o c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.replacements/example/stackoverflow_ast_repr_string/Edit_2021-05-30.rule_attr_rhs.xform2rhs.o 
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:290:1: warning: boost::spirit::x3::std_variant
CUSTOM_ERROR(USED_VARIANT)
^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:289:25: note: expanded from macro 'CUSTOM_ERROR'
#define CUSTOM_ERROR(X) _Pragma(STR(message(STR(X))))
                        ^
<scratch space>:196:2: note: expanded from here
 message(STR(boost::spirit::x3::std_variant))
 ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:292:11: warning: yes USE_UNFOLD_LEFT
  #pragma message("yes USE_UNFOLD_LEFT")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:304:11: warning: yes USE_TRANSFORM_ATTRIBUTE_SPECIALIZATION
  #pragma message("yes USE_TRANSFORM_ATTRIBUTE_SPECIALIZATION")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:311:11: warning: not TRANSFORM_ATTRIBUTE_RULE2RHS
  #pragma message("not TRANSFORM_ATTRIBUTE_RULE2RHS")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:314:11: warning: yes TRANSFORM_TRACE
  #pragma message("yes TRANSFORM_TRACE")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:319:11: warning: yes WITHOUT_WHITE
  #pragma message("yes WITHOUT_WHITE")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:329:11: warning: yes BRACED_AOF
  #pragma message("yes BRACED_AOF")
          ^
Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:334:11: warning: yes START_AOF
  #pragma message("yes START_AOF")
          ^
8 warnings generated.
clang++    c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.replacements/example/stackoverflow_ast_repr_string/Edit_2021-05-30.rule_attr_rhs.xform2rhs.o   -o c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.replacements/example/stackoverflow_ast_repr_string/Edit_2021-05-30.rule_attr_rhs.xform2rhs.exe
c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.replacements/example/stackoverflow_ast_repr_string/Edit_2021-05-30.rule_attr_rhs.xform2rhs.exe 
***ON LINE:420;
===>Enter:{{rule::parse:start
  ===>Enter:{{call_rule_definition
    Attribute      =std::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >;
    ActualAttribute=std::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >;
    rhs_attr_t     =std::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >;
     <start>
       <try>?   {;};</try>
    ===>Enter:{{rule::parse:gap
      ===>Enter:{{call_rule_definition
        Attribute      =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        ActualAttribute=std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        rhs_attr_t     =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
           <gap>
             <try>?   {;};</try>
        ===>Enter:{{rule::parse:braced
          ===>Enter:{{call_rule_definition
            Attribute      =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            ActualAttribute=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            rhs_attr_t     =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
                 <braced>
                   <try>?   {;};</try>
                   <fail/>
                 </braced>
          ===>Exit_:}}call_rule_definition
        ===>Exit_:}}rule::parse:braced
             <fail/>
           </gap>
      ===>Exit_:}}call_rule_definition
    ===>Exit_:}}rule::parse:gap
    ===>Enter:{{rule::parse:gap
      ===>Enter:{{call_rule_definition
        Attribute      =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        ActualAttribute=std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        rhs_attr_t     =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
           <gap>
             <try>   {;};</try>
        ===>Enter:{{rule::parse:braced
          ===>Enter:{{call_rule_definition
            Attribute      =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            ActualAttribute=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            rhs_attr_t     =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
                 <braced>
                   <try>{;};</try>
                   <success>;</success>
                   <attributes>tuple{char:{, string[;], char:}}</attributes>
                 </braced>
            Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:218:braced::post:val=tuple{char: , string[], char: }:attribute=tuple{char:{, string[;], char:}}:demangle_type(val)=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>:demangle_type(attribute)=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
          ===>Exit_:}}call_rule_definition
          Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:218:braced::post:val=tuple{char: , string[], char: }:attribute=tuple{char:{, string[;], char:}}:demangle_type(val)=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>:demangle_type(attribute)=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
        ===>Exit_:}}rule::parse:braced
        ===>Enter:{{rule::parse:braced
          ===>Enter:{{call_rule_definition
            Attribute      =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            ActualAttribute=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            rhs_attr_t     =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
                 <braced>
                   <try>;</try>
                   <fail/>
                 </braced>
          ===>Exit_:}}call_rule_definition
        ===>Exit_:}}rule::parse:braced
             <success>;</success>
             <attributes>container[variant( 0, string[   ]), variant( 1, tuple{char:{, string[;], char:}})]</attributes>
           </gap>
        Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:246:gap::post;
      ===>Exit_:}}call_rule_definition
      Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:246:gap::post;
    ===>Exit_:}}rule::parse:gap
    ===>Enter:{{rule::parse:gap
      ===>Enter:{{call_rule_definition
        Attribute      =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        ActualAttribute=std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        rhs_attr_t     =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
           <gap>
             <try>;</try>
        ===>Enter:{{rule::parse:braced
          ===>Enter:{{call_rule_definition
            Attribute      =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            ActualAttribute=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            rhs_attr_t     =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
                 <braced>
                   <try>;</try>
                   <fail/>
                 </braced>
          ===>Exit_:}}call_rule_definition
        ===>Exit_:}}rule::parse:braced
             <fail/>
           </gap>
      ===>Exit_:}}call_rule_definition
    ===>Exit_:}}rule::parse:gap
    ===>Enter:{{rule::parse:gap
      ===>Enter:{{call_rule_definition
        Attribute      =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        ActualAttribute=std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
        rhs_attr_t     =std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >;
           <gap>
             <try></try>
        ===>Enter:{{rule::parse:braced
          ===>Enter:{{call_rule_definition
            Attribute      =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            ActualAttribute=boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
            rhs_attr_t     =boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>;
                 <braced>
                   <try></try>
                   <fail/>
                 </braced>
          ===>Exit_:}}call_rule_definition
        ===>Exit_:}}rule::parse:braced
             <fail/>
           </gap>
      ===>Exit_:}}call_rule_definition
    ===>Exit_:}}rule::parse:gap
       <success></success>
       <attributes>container[variant( 1, string[?]), variant( 0, container[]), variant( 1, string[;])]</attributes>
     </start>
    Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:270:start::post;
    Exposed=

    not found;
    ;
    Transformed=

    not found;
    ;
    exposed_transformed_same=true;
  ===>Exit_:}}call_rule_definition
  Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:270:start::post;
  Exposed=

  not found;
  ;
  Transformed=

  not found;
  ;
  exposed_transformed_same=true;
===>Exit_:}}rule::parse:start
main:424:result=true;
print_attribute(ast)=
container[variant( 1, string[?]), variant( 0, container[]), variant( 1, string[;])];
:demangle_fmt(ast)=

not found;
;

Compilation finished at Thu Dec 23 06:12:56
--}--cut here--
  Unfortunately, "not found" gives **NO CLUE** about where the failure
  occurred :(((
  
  So, printed out the demangled with this code:
--{--cut here--
            std::cout<<__FILE__<<':'<<__LINE__<<":start::"<<__func__<<";\n";
            std::cout<<"Exposed=\n";
            std::cout<<"demangle_type<Exposed>=\n"<<demangle_type<Exposed>()<<";\n";
            demangle_fmt_type<Exposed>();
            std::cout<<";\n";
--}--cut here--  
  resulting in this output:
--{--cut here--
  Edit_2021-05-30.rule_attr_rhs.xform2rhs.cpp:270:start::post;
  Exposed=
  demangle_type<Exposed>=
  std::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >;

  not found;
  ;
--}--cut here--
  So, but that demangled into the fmt.cpp test driver, which, when
  run, reproduced the "not found;" output.
  
  So, set do_cout==true at start, and checked whether changes occurred
  for each replace.  What's baffling, s that despite the do_cout==true
  at start,  **NO** outputs occurred during the regex_replace's:
--{--cut here--
-*- mode: compilation; default-directory: "~/prog_dev/boost.org/boost.additions/test/utility/templ_expr/" -*-
Compilation started at Thu Dec 23 07:11:31

make -k run
clang++ -c -O0 -gdwarf-2 -g3  -std=c++20 -ftemplate-backtrace-limit=0 -fdiagnostics-show-template-tree -fno-elide-type -fmacro-backtrace-limit=0 -fexceptions -fcxx-exceptions    -I/home/evansl/prog_dev/boost.org/boost.additions -I/home/evansl/prog_dev/boost.org/boost_1_76_0     -ftemplate-depth=200  fmt.cpp -MMD -o c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.additions/test/utility/templ_expr/fmt.o 
clang++    c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.additions/test/utility/templ_expr/fmt.o   -o c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.additions/test/utility/templ_expr/fmt.exe
c:/msys64/tmp/build/clangxx11_0_0/boost.org/boost.additions/test/utility/templ_expr/fmt.exe 
133:fmt:txt=td::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> >, std::allocator<boost::spirit::x3::std_variant<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::fusion::deque<char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >;
136:fmt:txt=td::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> >, std::allocator<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> > > >, std::string >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> >, std::allocator<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> > > >, std::string > > >:same=0;
139:fmt:txt=td::vector<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> >, std::allocator<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> > > >, std::string >, std::allocator<boost::spirit::x3::std_variant<std::vector<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> >, std::allocator<boost::spirit::x3::std_variant<std::string, boost::fusion::deque<char, std::string, char> > > >, std::string > > >:same=1;

not found;

Compilation finished at Thu Dec 23 07:11:41
--}--cut here--
  OOPS, why was the s stripped off the std::vector at line 133?
  Ah, because of copy&paste error in the fmt.cpp.
  
  
    
